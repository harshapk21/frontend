/*
* All the promises have already started concurrent execution at input level only as we have called promise creation function in the input array itself.
* So we just need to sequentially verify the successful resolution 
*/
async function resolvePromisesWithPriority(promises) {
  // Sort promises by priority (ascending order)
  promises.sort((a, b) => a.priority - b.priority);

  try {
    for (const { task,priority } of promises) {
      try {
        // Wait for the first promise to resolve or reject
        const result = await task;
        return priority; // Immediately return the first resolved promise
      } catch (error) {
        // If the current promise is rejected, continue to the next one
        continue;
      }
    }

    // If no promise is resolved successfully, throw a custom error
    throw new Error("All APIs Failed");

  } catch (error) {
    return Promise.reject(error.message);
  }
}